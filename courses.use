model petrol_station

-- Enumerations
enum Grade {A, B, C, D, E, F, X, W}
enum TransactionStatus {active, inactive}
enum PumpAttached {attached, unattached}
enum QuantitySpecified {specified, unspecified}
enum FuelPumped {pumped, unpumped}
enum PumpStatus {pumpFree, pumpOccupied}

-- Classes
class PetrolStation
attributes
name : String
totalRevenue: Integer
totalPetrolLitresSold: Integer
transactionActive: TransactionStatus
pumps: Set(Pump)
operations
StartTransaction(pp: Pump)
AbortTransaction(pp: Pump)
EndTransaction(pp: pump)

end

class Pump
attributes
name: String
quantitySpecified: QuantitySpecified
cashAmount: Integer
litres: Integer
pumpAttached: PumpAttached
fuelPumped: FuelPumped
petrolPrice: Integer
pumpStatus: PumpStatus
operations
SetPetrolPrice(pr: Integer)
FreeUpPump()
OccupyPump()
InputCashAmount(am: Integer)
InputLitreQuantity(q: Integer)
ResetQuantity()
AttachPump()
RemovePump()
PressLever()
ResetPump()

end

class Reserve
attributes
reserveFuelAmount: Integer
operations
DispenseFromResever(am: Integer)
AddToReserve(am: Integer)

class Transaction
amountSpent: Integer
fuelPumped: Integer

-- A S S O C I A T I O N S --

-- Manages: A petrol station manages its pumps
association Manages between
PetrolStation[1] role manages
Pump[*] role managedBy
end

-- ReceiveFuel: A pump receives fuel from the reserve
association ReceiveFuel between
Pump[*] role receives
Reserve[1] role dispenses
end

-- RecordTransaction: A pump records a transaction
Pump[1] role records
Transaction[*] role recordedBy
end

constraints

context p:PetrolStation
inv: p.pumps->notEmpty()

context p:Pump
inv: p.petrolPrice >= 0

context p:Reserve
inv: reserveFuelAmount >= 0
inv: reserveFuelAmount <= 500

context PetrolStation::StartTransaction(pp: Pump)
pre: pp.pumpStatus=pumpFree
post:pp.pumpStatus=pumpOccupied

context PetrolStation:AbortTransaction(pp: Pump)
pre: pp.pumpStatus=pumpOccupied
post: pp.pumpStatus=pumpFree

context PetrolStation:EndTransaction(pp: Pump)
pre: pp.pumpStatus=pumpOccupied
post: pp.pumpStatus=pumpFree

context Pump::FreeUpPump()
pre: self.pumpStatus=pumpOccupied
post: self.pumpStatus=pumpFree

context Pump::OccupyPump()
pre: self.pumpStatus=pumpFree
post: self.pumpStatus=pumpOccupied

context Pump::InputCashAmount(am: Integer)
pre: self.pumpStatus=pumpOccupied
pre: am > 0
pre: self.quantitySpecified=unspecified
pre: am/self.petrolPrice > 0
post: self.quantitySpecified=specified
post: self.cashAmount=am
post: self.litres=(am/petrolPrice)

context Pump::InputLitreAmount(q: Integer)
pre: self.pumpStatus=pumpOccupied
pre: q > 0
pre: self.quantitySpecified=unspecified
post: self.quantitySpecified=specified
post: self.cashAmount=(q*self.petrolPrice)
post: self.litres=q

context ResetQuantity()
pre: self.quantitySpecified=specified
pre: self.fuelPumped=unpumped
post: self.cashAmount=0
post: self.litres=0
post: self.quantitySpecified=unspecified

context AttachPump()
pre: self.pumpStatus=pumpOccupied
pre: self.quantitySpecified=specified
pre: self.pumpAttached=unattached
post: self.pumpAttached=attached

context RemovePump()
pre: self.pumpStatus=pumpOccupied
pre: self.quantitySpecified=specified
pre: self.pumpAttached=attached
post: self.pumpAttached=unattached

context PressLever(res: Reserve)
pre: res.reserveFuelAmount>=self.quantitySpecified
pre: self.pumpAttached=attached
pre: self.fuelPumped=unpumped
post: res.reserveFuelAmount=res.reserveFuelAmount@pre-self.quantitySpecified
post: self.fuelPumped=pumped

context ResetPump()
post: self.quantitySpecified=unspecified
post: self.cashAmount=0
post: self.litres=0
post: self.pumpAttached=unattached
post: self.fuelPumped=unpumped



context Course
inv: self.waitList->notEmpty() implies (self.enrolled->size()=self.capacity and self.waiting->asSet()=self.waitList)

context i:Instructor
inv InstructorIsFacultyOrGrad:
i.instructor.oclIsKindOf(Faculty)
or i.instructor.oclIsKindOf(Grad)


context Instructor
inv : self.instructor.oclIsKindOf(Grad) implies self.coursesTaught->intersection(self.instructor.oclAsType(Grad).taking)->isEmpty()


context Student
inv: self.transcriptEntries->select(t|t.grade=#A or t.grade=#B or t.grade=#C).course->includesAll(self.taking.prerequisites->union(self.waitingFor.prerequisites))


context Student::newId(n : Integer):Id
pre GE100: n >= 100
post NewId: result.oclIsNew()
post IdNumber: result.number = n
post LinkId: self.id=result


context Student::enrol(c:Course)
pre: self.taking->excludes(c)
pre: c.enrolled->size() < c.capacity
post: self.taking->includes(c)


context Student::withdraw(c:Course)
pre: self.taking->includes(c)
post: self.taking=self.taking@pre->excluding(c)
post: c.waitList->notEmpty() implies (c.enrolled->includes(c.waiting@pre->first()) and c.waitList->excludes(c.waiting@pre->first()) and c.waiting=c.waiting@pre->excluding(c.waiting@pre->first()))


context Course::wait(s : Student)
pre: self.enrolled->size()=self.capacity
pre: self.enrolled->excludes(s) and self.waiting->asSet()->excludes(s)
post: self.waiting=self.waiting@pre->append(s) and self.waitList->includes(s)


context Course::del_wait(s : Student)
pre: self.waiting->asSet()->includes(s) and self.waitList->includes(s)
post: self.waiting=self.waiting@pre->excluding(s) and self.waitList->excludes(s)
