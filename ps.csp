-- Buffer
-- adapted from standard FDR2 example

datatype FRUIT = apples | oranges | pears

channel attachPump, detachPump, occupyPump, freePump, fuelPumped, 
pumpOperation, reserveOperation, stationOperation
channel inputCashAmount : Int
channel inputFuelLitres, reserveDispense, reserveAdd : Int
channel addRevenue, addPetrolLitresSold : Int

channel left,right,mid: FRUIT
channel ack

PUMPINPUT = inputCashAmount ? x -> PUMPFILL [] inputFuelLitres ? y -> PUMPFILL

PUMPFILL = occupyPump -> attachPump -> fuelPumped -> detachPump -> freePump -> MAIN

RESERVE = reserveDispense ? z -> MAIN [] reserveAdd ? z -> MAIN 

PETROLSTATION = addRevenue ? w -> MAIN [] addPetrolLitresSold ? w -> MAIN

PETROLPUMP = PUMPINPUT [| {|inputCashAmount,inputFuelLitres|} |] INPUTGEN

RESERVEOPERATIONS = RESERVE [| {|reserveDispense,reserveAdd|} |] RESERVEGEN

STATIONOPERATIONS = PETROLSTATION [| {|addRevenue,addPetrolLitresSold|} |] STATIONGEN

INPUTGEN = inputCashAmount!2 -> INPUTGEN [] inputCashAmount!4 -> INPUTGEN [] inputCashAmount!6 -> INPUTGEN 
[] inputFuelLitres!1 -> INPUTGEN [] inputFuelLitres!2 -> INPUTGEN [] inputFuelLitres!3 -> INPUTGEN

RESERVEGEN = reserveDispense!2 -> RESERVEGEN [] reserveDispense!10 -> RESERVEGEN [] reserveDispense!50 -> RESERVEGEN 
[] reserveAdd!2 -> RESERVEGEN [] reserveAdd!10 -> RESERVEGEN [] reserveAdd!50 -> RESERVEGEN

STATIONGEN = addRevenue!2 -> STATIONGEN [] addRevenue!4 -> STATIONGEN [] addRevenue!6 -> STATIONGEN 
[] addPetrolLitresSold!1 -> STATIONGEN [] addPetrolLitresSold!2 -> STATIONGEN [] addPetrolLitresSold!3 -> STATIONGEN

MAIN = pumpOperation -> PETROLPUMP [] reserveOperation -> RESERVEOPERATIONS [] stationOperation -> STATIONOPERATIONS
-------------

-- Trace Check Generated by ProB:
PROB_TEST_TRACE = left.oranges -> right.oranges-> left.pears -> 
                  right.pears -> left.apples -> right.apples -> STOP

Test = (ack -> left!apples -> STOP) \ {|ack|}

